package sokoban;


import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JFrame;
import java.util.HashMap;
import java.io.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.util.*;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingConstants;


/**
 *
 * @author User
 */
public class Game extends javax.swing.JFrame implements KeyListener {
    private JLabel[][] myElements = new JLabel[12][12];
    private Map tmpMap;
    private boolean complete;
 
    JPanel panel = new JPanel();
    HashMap<String, ImageIcon > imageHashMap;
    
    /*
     * Creates new form Game
     */
    public Game() {
        super("Max Sokoban Game");

        initComponents();
      imageHashMap = new HashMap<>();

        for (int i = 0; i < myElements.length; i++) {
            for (int j = 0; j < myElements.length; j++) {
                myElements[i][j] = new JLabel();
                pnl_game.add(myElements[i][j]);                 
            }  
        }
        this.addKeyListener(this);
        setFocusable(true);
        tmpMap = new Map();
        tmpMap.loadMap("/map/Map0.map");
        drawMap();  
}
    
 public void showLevel(){
        jLabel1.setText("A New Level");      
    }
    
    public void showWin(){
        jLabel1.setText("Congratulations You won!");      
    }

    public void drawMap(){
       for (int i = 0; i < myElements.length; i++) {
            for (int j = 0; j < myElements.length; j++) {
               addToMap(tmpMap.getMyMap()[i][j].getImgFilename());
               myElements[i][j].setIcon(imageHashMap.get(tmpMap.getMyMap()[i][j].getImgFilename()));
            }
        }
    }
    
    public void addToMap(String path){
      if(imageHashMap.containsKey(path)); //{System.out.println("Already exist");}
          else {
      imageHashMap.put(path, new ImageIcon(getClass().getResource(path)));//{System.out.println("Added");}
        }
    }
      
    public void setLabelIcon(String path){
        addToMap(path);
        lbl_output.setIcon(imageHashMap.get(path));
       }

    
    
public void readFile(){   

try {
    FileReader fileReader = new FileReader("/map/Map0.map");
    BufferedReader bufferedReader = new BufferedReader(fileReader);
    String line;

    while ((line = bufferedReader.readLine()) != null) {
        String[] parts = line.split(":");
        String key = parts[0];
        String value = parts[1];
        if (value.endsWith(".jpg")) {
            ImageIcon icon = new ImageIcon(value);
            //imageHashMap.put(key, icon);
        } else {
            //imageHashMap.put(key, value);
        }
    }

    bufferedReader.close();
    fileReader.close();
} catch (IOException e) {
    e.printStackTrace();
}
}


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        pnl_status = new javax.swing.JPanel();
        lbl_output = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnl_game = new javax.swing.JPanel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnl_status.setPreferredSize(new java.awt.Dimension(400, 30));

        lbl_output.setText("jLabel1");

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout pnl_statusLayout = new javax.swing.GroupLayout(pnl_status);
        pnl_status.setLayout(pnl_statusLayout);
        pnl_statusLayout.setHorizontalGroup(
            pnl_statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_statusLayout.createSequentialGroup()
                .addComponent(lbl_output, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        pnl_statusLayout.setVerticalGroup(
            pnl_statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_statusLayout.createSequentialGroup()
                .addGroup(pnl_statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_output, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnl_status, java.awt.BorderLayout.PAGE_END);

        pnl_game.setPreferredSize(new java.awt.Dimension(400, 400));
        pnl_game.setLayout(new java.awt.GridLayout(12, 12));
        getContentPane().add(pnl_game, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
              
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbl_output;
    private javax.swing.JPanel pnl_game;
    private javax.swing.JPanel pnl_status;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e){

    }
    
    @Override
    public void keyTyped(KeyEvent e) {
       
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if(e.getKeyChar() == 'w' || e.getKeyCode()== KeyEvent.VK_UP){
            tmpMap.movePlayer(1);
            lbl_output.setText("Moves up");
        }else if (e.getKeyChar() == 's' || e.getKeyCode()== KeyEvent.VK_DOWN){
             tmpMap.movePlayer(2);
            lbl_output.setText("Moves down");
        }else if(e.getKeyChar() == 'a' || e.getKeyCode()== KeyEvent.VK_LEFT){
            tmpMap.movePlayer(3);
            lbl_output.setText("Moves left");
        }else if(e.getKeyChar() == 'd' || e.getKeyCode()== KeyEvent.VK_RIGHT){
             tmpMap.movePlayer(4);
            lbl_output.setText("Moves right");
        }
        drawMap();
        if(tmpMap.nextLevel())
            showLevel();
        if (tmpMap.isComplete())
            showWin();
    }


    @Override
    public void keyReleased(KeyEvent e) {
        
    }


}
